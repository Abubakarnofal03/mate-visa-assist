import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { documentType, prompt, country, university } = await req.json();

    console.log('Generating document with Gemini API:', { documentType, country, university });

    // Create the system prompt based on document type
    const systemPrompt = documentType === 'sop' 
      ? `You are an expert academic writer specializing in Statement of Purpose (SOP) documents for international students. Generate a professional, compelling, and personalized SOP based on the provided information. The SOP should be well-structured with clear paragraphs covering: introduction and motivation, academic background, professional experience (if any), why this specific program/university, future goals, and conclusion. Keep it within 800-1000 words.`
      : `You are an expert career counselor and professional writer specializing in cover letters for job applications. Generate a professional, compelling, and tailored cover letter based on the provided information. The cover letter should be well-structured with clear paragraphs covering: opening statement, relevant qualifications and experience, why you're interested in this role/company, and a strong closing. Keep it concise and impactful, within 300-500 words.`;

    const userPrompt = documentType === 'sop' 
      ? `Please write a Statement of Purpose for:
        Country: ${country || 'Not specified'}
        University: ${university || 'Not specified'}
        
        Additional details: ${prompt}
        
        Make it personal, specific, and compelling while maintaining a professional tone.`
      : `Please write a cover letter for:
        Location: ${country || 'Not specified'}
        Company/Organization: ${university || 'Not specified'}
        
        Job details and qualifications: ${prompt}
        
        Make it professional, specific, and compelling while highlighting relevant qualifications.`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `${systemPrompt}\n\n${userPrompt}`
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 1,
          topP: 1,
          maxOutputTokens: 2048,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('Gemini API error:', errorData);
      throw new Error(`Gemini API error: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    console.log('Gemini API response received');
    
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!generatedText) {
      throw new Error('No content generated by Gemini API');
    }

    return new Response(JSON.stringify({ generatedText }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in generate-with-gemini function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});